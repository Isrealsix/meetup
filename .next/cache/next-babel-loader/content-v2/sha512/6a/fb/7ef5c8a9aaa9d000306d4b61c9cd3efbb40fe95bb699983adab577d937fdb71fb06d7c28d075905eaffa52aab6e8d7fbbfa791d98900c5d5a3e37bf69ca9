{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/isrealsix/PROG/NextJS/Meetup/pages/[meetupId]/index.js\";\nimport { MongoClient } from \"mongodb\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: props.image,\n    title: props.title,\n    address: props.address,\n    description: props.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 13\n  }, this);\n}\n\nexport async function getStaticPaths() {\n  const client = await MongoClient.connect('mongodb+srv://pegasus:pegasusDB@cluster0.szf3b.mongodb.net/meetupsdb?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    })) // [\n    //     {\n    //         params: {\n    //             meetupId: 'm1'\n    //         }\n    //     },\n    //     {\n    //         params: {\n    //             meetupId: 'm2'\n    //         }\n    //     }\n    // ]\n\n  };\n}\nexport async function getStaticProps(context) {\n  const meetupId = context.params.meetupId; // fetch data for a single meetup\n\n  const client = await MongoClient.connect('mongodb+srv://pegasus:pegasusDB@cluster0.szf3b.mongodb.net/meetupsdb?retryWrites=true&w=majority');\n  const db = client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["/home/isrealsix/PROG/NextJS/Meetup/pages/[meetupId]/index.js"],"names":["MongoClient","MeetupDetail","MeetupDetails","props","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","meetupData"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,uCAAzB;;AAGA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,sBACQ,QAAC,YAAD;AAAc,IAAA,KAAK,EAAEA,KAAK,CAACC,KAA3B;AAAkC,IAAA,KAAK,EAAED,KAAK,CAACE,KAA/C;AAAsD,IAAA,OAAO,EAAEF,KAAK,CAACG,OAArE;AAA8E,IAAA,WAAW,EAAEH,KAAK,CAACI;AAAjG;AAAA;AAAA;AAAA;AAAA,UADR;AAGH;;AAED,OAAO,eAAeC,cAAf,GAAgC;AACnC,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoB,kGAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAACC,IAAAA,GAAG,EAAE;AAAN,GAA3B,EAAqCC,OAArC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AACA,SAAO;AACHC,IAAAA,QAAQ,EAAE,KADP;AAEHC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAK;AAC1BC,MAAAA,MAAM,EAAE;AACJC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AADN;AADkB,KAAL,CAAlB,CAFJ,CAQH;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AApBG,GAAP;AAsBH;AAGD,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAD0C,CAE1C;;AACA,QAAMf,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CAAoB,kGAApB,CAArB;AAEA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AAEA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AACnDb,IAAAA,GAAG,EAAEQ;AAD8C,GAA1B,CAA7B;AAIAf,EAAAA,MAAM,CAACS,KAAP;AAKA,SAAO;AACHf,IAAAA,KAAK,EAAE;AACH2B,MAAAA,UAAU,EAAEF;AADT;AADJ,GAAP;AAKH;AAGD,eAAe1B,aAAf","sourcesContent":["import { MongoClient } from \"mongodb\"\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\"\n\n\nfunction MeetupDetails(props) {\n    return (\n            <MeetupDetail image={props.image} title={props.title} address={props.address} description={props.description}/>\n    )\n}\n\nexport async function getStaticPaths() {\n    const client = await MongoClient.connect('mongodb+srv://pegasus:pegasusDB@cluster0.szf3b.mongodb.net/meetupsdb?retryWrites=true&w=majority')\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    const meetups = await meetupsCollection.find({}, {_id: 1}).toArray();\n    client.close();\n    return {\n        fallback: false,\n        paths: meetups.map(meetup => ({\n            params: {\n                meetupId: meetup._id.toString()\n            }\n        }))\n        \n        // [\n        //     {\n        //         params: {\n        //             meetupId: 'm1'\n        //         }\n        //     },\n\n        //     {\n        //         params: {\n        //             meetupId: 'm2'\n        //         }\n        //     }\n        // ]\n    }\n}\n\n\nexport async function getStaticProps(context) {\n    const meetupId = context.params.meetupId\n    // fetch data for a single meetup\n    const client = await MongoClient.connect('mongodb+srv://pegasus:pegasusDB@cluster0.szf3b.mongodb.net/meetupsdb?retryWrites=true&w=majority')\n\n    const db = client.db();\n\n    const meetupsCollection = db.collection('meetups');\n\n    const selectedMeetup = await meetupsCollection.findOne({\n        _id: meetupId\n    });\n\n    client.close();\n\n\n\n\n    return {\n        props: {\n            meetupData: selectedMeetup\n        }\n    }\n}\n\n\nexport default MeetupDetails\n"]},"metadata":{},"sourceType":"module"}